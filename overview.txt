/* Files only contain ModuleDeclarations
 *
 */

/***********/
/* Imports */
/***********/

/* From files */
/* TODO: Figure out imports */
import moduleName;
import folder.otherFolder.moduleName as diffName; /* Would otherwise be moduleName */
import folder.otherFolder.[specific, modules as diffName];

/* From modules */
import filename;

/***********/
/* Exports */
/***********/

/* Inside files */
export default moduleName;
export default ModuleDeclaration;
export moduleName as diffName;
export [ moduleName as diffName ];

/* Inside module */
export className; /* Must be public */

/***********/
/* Modules */
/***********/

module ModuleName using OtherModule1, OtherModule2 where
    ModuleDeclaration
    TypeDeclaration
    FunctionDeclaration
end

/* Access public members through
 * `moduleName::memberName`
 */

/*************/
/* Metatypes */
/*************/

$type ExampleMetatype where

end

/*********/
/* Types */
/*********/

struct ExampleStruct where
    var MutableField: FieldType = FieldInitializer;
end

class ExampleClass<ExampleTypeParameters> : ExampleParentClass where
    var MutableField: FieldType = FieldInitializer;

    val ConstantPointerField: FieldType = FieldInitializer where
        get = () -> {

        }
    end

    let ImmutableField: FieldType = FieldInitializer;

    fun ExampleFunction: (InputTypes) -> (ReturnType)
        = (x) -> {

    }

    companion object where

    end

    companion record where

    end
end

enum ExampleEnum where
    ENUM(Args) where
        /* Anonymous class */
    end,
    ENUM2(Args);

    fun __init__: (*Self, ArgsType) -> Unit
        = (self, args) -> {

    }
end

trait ExampleTrait where
    fun ExampleAbstractFunction: (InputTypes) -> (OutputTypes);
end

impl ExampleTrait for ExampleClass where
    fun ExampleAbstractFunction
        = (inputs) -> {
         
    }
end

record ExampleRecord where
    ImmutableField: FieldType = FieldInitializer
end

interface ExampleInterface where
    fun ExampleAbstractFunction: (InputTypes) -> (OutputTypes);
end

type ExampleTupleType = (Int, Double);

type ExampleFunctionType = InputType -> InputType2 -> OutputType;

type ExampleUnionType = Int | String;
type ExampleIntersectionType = Int & String;

/***********/
/* Object */
/**********/

object ExampleObject : ExampleParentClass(args) where
    /* Anonymous class */
end

/****************/
/* Control Flow */
/****************/

(if|unless) expr then
    expr
elsif
    expr
else
    expr
end

(while|until) expr then
    expr
end

do
    expr
(while|until) expr;

switch expr where
    case value => expr
    case _ => defaultExpr
end

for i, j in expr where
    expr
end

try
    expr
catch ExampleException
    expr
finally
    expr
end

/***************/
/* Expressions */
/***************/

x <| y /* == x(y) */
x |> y /* == y(x) */

x % y  /* Remainder */
x %% y /* Modulo */

x ** y /* Exponent */

/* (Type, Type) -> Bool */
x <: y  /* is subclass */
x :> y  /* is superclass */
x <:> y /* is super or subclass */
x =:= y /* is class */
